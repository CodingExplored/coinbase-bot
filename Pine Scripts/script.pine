//@version=5
strategy('My BTC Investment Strategy', overlay=true, initial_capital=5000, pyramiding=0, currency='USD', default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_type=strategy.commission.percent, commission_value=0.1)

// === Utility Functions ===
Atr(p) =>
    atr = 0.
    Tr = math.max(high - low, math.max(math.abs(high - close[1]), math.abs(low - close[1])))
    atr := nz(atr[1] + (Tr - atr[1]) / p, Tr)
    atr

TEMA(series, length) =>
    ema1 = ta.ema(series, length)
    ema2 = ta.ema(ema1, length)
    ema3 = ta.ema(ema2, length)
    3 * ema1 - 3 * ema2 + ema3

// === Inputs ===
tradeType = input.string('LONG', title='What trades should be taken : ', options=['LONG', 'SHORT', 'BOTH', 'NONE'])
trend_type1 = input.string('TEMA', title='First Trend Line : ', options=['LSMA', 'TEMA', 'EMA', 'SMA'])
trend_type2 = input.string('LSMA', title='Second Trend Line : ', options=['LSMA', 'TEMA', 'EMA', 'SMA'])
trend_type1_length = input(25, 'Length of the First Trend Line')
trend_type2_length = input(100, 'Length of the Second Trend Line')

// === Trend Lines ===
leadLine1 = trend_type1 == 'LSMA' ? ta.linreg(close, trend_type1_length, 0) : trend_type1 == 'TEMA' ? TEMA(close, trend_type1_length) : trend_type1 == 'EMA' ? ta.ema(close, trend_type1_length) : ta.sma(close, trend_type1_length)
leadLine2 = trend_type2 == 'LSMA' ? ta.linreg(close, trend_type2_length, 0) : trend_type2 == 'TEMA' ? TEMA(close, trend_type2_length) : trend_type2 == 'EMA' ? ta.ema(close, trend_type2_length) : ta.sma(close, trend_type2_length)

p3 = plot(leadLine1, color=color.new(#53b987, 50), title='EMA', linewidth=1)
p4 = plot(leadLine2, color=color.new(#eb4d5c, 50), title='SMA', linewidth=1)
fill(p3, p4, color=leadLine1 > leadLine2 ? #53b987 : #eb4d5c, transp=60)

// === Conditions ===
UT = ta.crossover(leadLine1, leadLine2)
DT = ta.crossunder(leadLine1, leadLine2)

long_tp1_inp = input.float(15, title='Long Take Profit 1 %', step=0.1) / 100
long_tp1_qty = input.int(20, title='Long Take Profit 1 Qty')
long_tp2_inp = input.float(30, title='Long Take Profit 2 %', step=0.1) / 100
long_tp2_qty = input.int(20, title='Long Take Profit 2 Qty')
long_sl_input = input.float(5, title='Stop Loss in %', step=0.1) / 100

multiplier = input.float(3.5, 'SL Multiplier', minval=1, step=0.1)
ATR_period = input.int(8, 'ATR period', minval=1, step=1)

SC = input(close, 'Source')
SL1 = multiplier * Atr(ATR_period)
Trail1 = 0.0
iff_1 = SC > nz(Trail1[1], 0) ? SC - SL1 : SC + SL1
Trail1 := SC < nz(Trail1[1], 0) and SC[1] < nz(Trail1[1], 0) ? math.min(nz(Trail1[1], 0), SC + SL1) : iff_1
Trail1_high = ta.highest(Trail1, 50)

entry_long = ta.crossover(leadLine1, leadLine2) and Trail1_high < close
exit_long = close < Trail1_high or ta.crossover(leadLine2, leadLine1) or close < strategy.position_avg_price * (1 - long_sl_input)

long_take_level_1 = strategy.position_avg_price * (1 + long_tp1_inp)
long_take_level_2 = strategy.position_avg_price * (1 + long_tp2_inp)
tp1Hit = close >= long_take_level_1 and strategy.position_size > 0

// === Backtest Range ===
testStart = timestamp(input(2025, 'Backtest Start Year'), input(1, 'Month'), input(1, 'Day'), 0, 0)
testEnd = timestamp(input(9999, 'Backtest Stop Year'), input(12, 'Month'), input(31, 'Day'), 0, 0)
testPeriod = time >= testStart and time <= testEnd

// === Alerts ===
symbol = syminfo.basecurrency + "-" + syminfo.currency
newLongSignal = entry_long and testPeriod
closeLongSignal = exit_long and testPeriod

alertcondition(newLongSignal, title='Enter Long Alert', message='BUY {{ticker}}')
alertcondition(closeLongSignal, title='Exit Long Alert', message='SELL {{ticker}}')
alertcondition(tp1Hit, title='TP1 Hit', message='TP {{ticker}}')

if newLongSignal
    alert("BUY " + symbol, alert.freq_once_per_bar)

if closeLongSignal
    alert("SELL " + symbol, alert.freq_once_per_bar)

if tp1Hit
    alert("TP " + symbol, alert.freq_once_per_bar)

// === Orders ===
if testPeriod and (tradeType == 'LONG' or tradeType == 'BOTH')
    if strategy.position_size == 0 or strategy.position_size > 0
        strategy.entry('long', strategy.long, when=entry_long)
        strategy.exit('TP1', 'long', qty_percent=long_tp1_qty, limit=long_take_level_1)
        strategy.exit('TP2', 'long', qty_percent=long_tp2_qty, limit=long_take_level_2)
        strategy.close('long', when=exit_long)

// === Plot Levels ===
plot(strategy.position_size > 0 ? long_take_level_1 : na, style=plot.style_linebr, color=color.green, title='TP1')
plot(strategy.position_size > 0 ? long_take_level_2 : na, style=plot.style_linebr, color=color.green, title='TP2')
plot(strategy.position_size > 0 ? Trail1_high : na, style=plot.style_linebr, color=color.red, title='Stop Loss')